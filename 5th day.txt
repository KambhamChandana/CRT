# stack

def push(value):
    top=-1
    if(top==len(stack)-1):
        return "stack is full"
    else:
            top=top+1
            return stack.append(value)
            
stack=[10]
push(20)    
push(30)       # size as 5
push(40)
ans=push(20)
print(stack)
output:[10, 20, 30, 40, 20]


# stack
# pop

def push(value):
    top=-1
    if(top==4):
        return "stack is full"
    else:
        top=top+1
        return stack.append(value) 
def pop():
    top=5
    if(top!=-1):
        return stack.pop()
    else:
        top=-1
        return "stack is empty"
            
stack=[10]
push(20)    
push(30)       # size as 5
push(40)
push(50)
push(60)
pop()
print(stack)

output:[10, 20, 30, 40, 50]



# stack
# pop

def push(value):
    global top    
    if(top==4):
        return "stack is full"
    else:
        top=top+1
        return stack.append(value) 
def pop():
    top=5
    if(top!=-1):
        return stack.pop()
    else:
        top=-1
        return "stack is empty"
top=-1
size=5
stack=[None]*size
push(20)    
push(30)       # size as 5
push(40)
push(50)
push(60)
print(stack)


            # stack
# pop

def push(value):
    global top    
    if(top==4):
        return "stack is full"
    else:
        top=top+1
        return stack.append(value) 
def pop():
    top=5
    if(top!=-1):
        return stack.pop()
    else:
        top=-1
        return "stack is empty"
top=-1
size=5
stack=[None]*size
push(20)    
push(30)       # size as 5
push(40)
push(50)
push(60)
print(stack)


            # stack
# pop

def push(value):
    global top    
    if(top==4):
        return "stack is full"
    else:
        top=top+1
        return stack.append(value) 
def pop():
    top=5
    if(top!=-1):
        return stack.pop()
    else:
        top=-1
        return "stack is empty"
top=-1
size=5
stack=[None]*size
push(20)    
push(30)       # size as 5
push(40)
push(50)
push(60)
print(stack)


            vv# stack
# pop

def push(value):
    global top    
    if(top==4):
        return "stack is full"
    else:
        top=top+1
        return stack.append(value) 
def pop():
    top=5
    if(top!=-1):
        return stack.pop()
    else:
        top=-1
        return "stack is empty"
top=-1
size=5
stack=[None]*size
push(20)    
push(30)       # size as 5
push(40)
push(50)
push(60)
print(stack)


output:[None, None, None, None, None, 20, 30, 40, 50, 60]



# stack
# peek
stack = []
top = -1
def push(value):
    global top 
    stack.append(value)
    top += 1
def pop():
    global top
    if top == -1:
       print ("stack is empty")   
       return
    else:
         stack.pop()    
         top -= 1

def peek():
    if top == -1:
        return "stack is empty"
    else:
        return f"top element ={stack[top]}"
    
def display():
    if (top==-1):
        print("empty")
    else:
        for i in range(top,-1,-1):
            print(stack[i])
top=-1
push(10)
push(30)
push(50)
push(70)
pop()
pop()
print(peek())
display()

output:
                    
top element =30
30
10



stack = []
top = -1
def push(value):
    global top
    stack.append(value)
    top   += 1
    
def pop():
    global top
    if top == -1:
        print("satck is empty")
        return 
    else:
        stack.pop()
        top -= 1
    
def peek():
    if top == -1:
        return " stack is empty"
    else:
        return f"top element ={stack[top]}"
        
def display():
    if(top==-1):
        print("empty")
    else:
        for i in range(top,-1,-1):
            print(stack[i])
while True:
    print("\n--Welcome--")
    print("1.push")
    print("2.pop")
    print("3.peek element")
    print("4,display element")
    print(5.Exit")
    choice=int(input("enter the choice:"))
    if choice==1:
     value=int(input("enter the element you want to push:"))
        push(value)
    elif choice==2:
        pop()
    elif choice==3:




## queue

class queue:
    def __init__(self):
        self.q=[]
        self.value=value
        self.front=-1
        self.rare=-1
    def enqueue(self,Q,value):
        if(self.front==-1):
            self.front=0
            self.rare=self.rare+1
            # append it
        self.Q.append(value)
    def dequeue(self):
        #check for empty condition
        #delete element at front
        if self.is_empty():
            return"Queue is empty!"
        value = self.queue[self.front]
        self.front += 1 
        if self.front > self.rare:
            self.front = self.rare = -1
        return value
        
        def is_empty(self):
            if self.is_empty():
                return 0
            return self.front == -1 
        def size(self):
            if self.is_empty():
                return 0
            return self.front-self.rare-1
            
        def display(self):
            if self.is_empty():
                print("queue is empty")
            else:
                print(self.q[self.front:self.rare+1])
            
        
        
            
        
            
    
            



            


