TREES:

class Node:
    def __init__(self):
        self.left = None
        self.right = None
        self.data = None
tree=Node()
tree.data= 1 #root node
tree.left = Node()  #creating new node for left
tree.left.data = 2  # inserting data in left child
# creating new node for right child
tree.right = Node()
tree.right.data =3
print(tree.data) # root node
print(tree.left.data) #lrft child
# right child
print(tree.right.data) # right child

output:
1
2
3

inorder traversal:

class Node:
    def __init__(self):
        self.left = None
        self.right = None
        self.data = None
    def inorder_traversal(self,Node):
        if Node:
            self.inorder_traversal(Node.left)
            print(Node.data)
            self.inorder_traversal(Node.right)
tree=Node()
tree.data= 1 #root node
tree.left = Node()  #creating new node for left
tree.left.data = 2  # inserting data in left child
# creating new node for right child
tree.right = Node()
tree.right.data =3
tree.left.left = Node()
tree.left.left.data =4
tree.left.right = Node()
tree.left.right.data =5
tree.right.left = Node()
tree.right.left.data =6
tree.right.right = Node()
tree.right.right.data =7
tree.inorder_traversal(Node=tree)

output:
4
2
5
1
6
3
7




class Node:
    def __init__(self):
        self.left = None
        self.right = None
        self.data = None
    def preorder_traversal(self,Node):
        if Node:
            print(Node.data, end=" ")
            self.preorder_traversal(Node.right)
            self.preorder_traversal(Node.right)
tree=Node()
tree.data= 1 #root node
tree.left = Node()  #creating new node for left
tree.left.data = 2  # inserting data in left child
# creating new node for right child
tree.right = Node()
tree.right.data =3
tree.left.left = Node()
tree.left.left.data =4
tree.left.right = Node()
tree.left.right.data =5
tree.right.left = Node()
tree.right.left.data =6
tree.right.right = Node()
tree.right.right.data =7
tree.preorder_traversal(Node=tree)

1 3 7 7 3 7 7 


class Node:
    def __init__(self):
        self.data= None
        self.left = None
        self.right = None
        self.data = None
        
    def inorder_traversal(self,Node):
        if Node:
            self.inorder_traversal(Node.left)
            self.inorder_traversal(Node.right)
            print(Node.data,)
    def sum_of_Nodes(self,Node):
        if Node is None:
            return 0
        return Node.data+self.sum_of_Nodes(Node.left)+self.sum_of_Nodes(Node.right)

    

tree=Node()
tree.data= 1 #root node
tree.left = Node()  #creating new node for left
tree.left.data = 2  # inserting data in left child
# creating new node for right child
tree.right = Node()
tree.right.data =3
tree.left.left = Node()
tree.left.left.data =4
tree.left.right = Node()
tree.left.right.data =5
tree.right.left = Node()
tree.right.left.data =6
tree.right.right = Node()
tree.right.right.data =7
tree.inorder_traversal(Node=tree)

print(tree.sum_of_Nodes(Node=tree))
print(tree.sum_of_Nodes(Node=tree.left))
print(tree.sum_of_Nodes(Node=tree.right))


4
5
2
6
7
3
1
28
11
16

=== Code Execution Successful ===


'''
# Node Class:
class Node:
    def init(self,val):
        self.data = val
        self.left = None
        self.right = None
'''

class Solution:
    def solve(self, root, arr):
        if root is None:
            return 0
        self.solve(root.left,arr)
        arr.append(root.data)
        self.solve(root.right,arr)
        return arr
    def inOrder(self,root):
        # code
        ans = self.solve(root, [])
        return ans
        


Input: 
root[] =
1 2 3 4 5
Your Output:
4 2 5 1 3
Expected Output:
4 2 5 1 3

SEARCH A  NODE BST:
#Your task is to complete this function

class BST:
   
    #Function to search a node in BST.
    def search(self, node, x):
        #code here
        if node is None:
            return 0
        if node.data == x:
            return True
        if node.data> x:
            returnself.search(node.left, x)
        else:
            return self.search(node.right, x)
OUTPUT:
geeksforgeeks
Courses
Tutorials
Practice
Jobs
H

Search...


Search a node in BST
Difficulty: BasicAccuracy: 68.46%Submissions: 99K+Points: 1Average Time: 15m
Given a Binary Search Tree and a node value X, find if the node with value X is present in the BST or not.


Example 1:

Input:         2
                \
                 81 
               /    \ 
             42      87 
              \       \ 
               66      90 
              / 
            45
X = 87
Output: 1
Explanation: As 87 is present in the
given nodes , so the output will be
1.
Example 2:

Input:      6
             \ 
              8 
             / \ 
            7   9
X = 11
Output: 0
Explanation: As 11 is not present in 
the given nodes , so the output will
be 0.

Your Task:
You don't need to read input or print anything. Complete the function search()which returns true if the node with value x is present in the BSTelse returns false.


Expected Time Complexity: O(Height of the BST)
Expected Auxiliary Space: O(1).


Constraints:
1 <= Number of nodes <= 105

Company Tags
Linkedin
Topic Tags
Related Articles
If you are facing any issue on this page. Please let us know.
Output Window
Compilation Completed
Input: 
7
2 81 87 42 66 90 45
87
Your Output:
1
Expected Output:
Python3



            return 0



Custom Input

